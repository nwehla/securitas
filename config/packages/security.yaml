security:
    encoders:
        App\Security\User:
            algorithm: auto          
        App\Entity\Utilisateurs:
            algorithm: auto        
        App\Entity\Auteurs:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateurs
                property: email
        # used to reload user from session & other features (e.g. switch_user)
            # id: App\Security\UserProvider

        #  in database:
        #     entity:
        #         class: App\Entity\Auteurs
        #         property: username   
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy
            provider: app_user_provider
            # provider: in database
            # form_login:
            #     login_path: aut_connection
            #     check_path: aut_connection                                    
            # guard:
            #     authenticators:
            #         - App\Security\UtilisateursAuthenticator
            logout:
                path: app_logout
            guard:
                authenticators:
                    - App\Security\UtilisateursAuthenticator
                # where to redirect after logout
                #target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy: 
        ROLE_EDITEUR: ROLE_USER
        ROLE_ADMIN: ROLE_EDITEUR
        
    access_control:
        # - { path: ^/, roles: IS_AUTHENTIFICATED_ANONYMOUSLY }
        # - { path: ^/bibliotheque, roles: ROLE_ADMIN }
        # - { path: ^/article, roles: [ROLE_USER,ROLE_ADMIN] }
